name: "EVM Summarization Evaluation"
version: "1.0.0"
description: "EVM 语义摘要化评估配置"

metadata:
  author: "Perfx Team"
  date: "2024-12-19"
  tags: ["evm", "semantics", "summarization", "evaluation"]

# 平台条件定义
# 这些条件用于根据平台自动选择正确的构建命令
# - platform.macbook: Apple Silicon Mac (需要特殊的编译器设置)
# - platform.other: 其他平台 (使用默认设置)
conditions:
  platform.macbook: "platform.system() == 'Darwin' and platform.machine() == 'arm64'"
  platform.other: "platform.system() != 'Darwin' or platform.machine() != 'arm64'"

global:
  working_directory: "."
  output_directory: "results"
  timeout: 18000  # 5 hours
  parallel: false
  verbose: true
  
  # 环境变量设置
  environment:
    K_FRAMEWORK: "llvm"
    PYTHONPATH: "${PYTHONPATH}:./repositories/evm-semantics/kevm-pyk"

# 仓库依赖
repositories:
  - name: "evm-semantics"
    url: "https://github.com/runtimeverification/evm-semantics.git"
    branch: "jh/evaluate-summarize"
    path: "evm-semantics"
    submodules: true

# 评估步骤
steps:
  # 步骤 1: 环境准备
  - name: "setup_environment"
    description: "设置评估环境"
    enabled: true
    commands:
      # 创建必要的目录
      - command: "mkdir -p results/backups results/logs results/data"
        cwd: "."
        timeout: 30
        expected_exit_code: 0
      # MacBook 编译器环境设置
      - command: "python eval-evm-summary/setup_macos_env.py"
        cwd: "."
        timeout: 60
        expected_exit_code: 0
        environment:
          APPLE_SILICON: "true"
        condition: "platform.macbook"
      # 非 MacBook 平台跳过特殊设置
      - command: "echo 'Non-MacBook platform, skipping MacBook-specific setup'"
        cwd: "."
        timeout: 10
        expected_exit_code: 0
        condition: "platform.other"
      # 记录环境设置完成
      - command: "echo \"Environment setup completed at $(date)\" > results/logs/setup.log"
        cwd: "."
        timeout: 30
        expected_exit_code: 0

  # 步骤 2: 构建 KEVM 语义
  - name: "build_kevm"
    description: "构建 KEVM 语义"
    enabled: true
    depends_on: ["setup_environment"]
    commands:
      # 更新子模块
      - command: "git submodule update --init --recursive"
        cwd: "repositories/evm-semantics"
        timeout: 600
        expected_exit_code: 0
      # 安装依赖 (使用 uv)
      - command: "uv sync"
        cwd: "repositories/evm-semantics/kevm-pyk"
        timeout: 300
        expected_exit_code: 0
      # MacBook 构建 plugin (Apple Silicon)
      - command: "APPLE_SILICON=true uv --project kevm-pyk run -- kdist --verbose build evm-semantics.plugin"
        cwd: "repositories/evm-semantics"
        timeout: 1800  # 30 minutes
        expected_exit_code: 0
        retry:
          max_attempts: 2
          delay: 60
          on_failure: "build_recovery"
        environment:
          CC: "/opt/homebrew/opt/llvm@14/bin/clang"
          CXX: "/opt/homebrew/opt/llvm@14/bin/clang++"
        condition: "platform.macbook"
      # 通用平台构建 plugin
      - command: "uv --project kevm-pyk run -- kdist --verbose build evm-semantics.plugin"
        cwd: "repositories/evm-semantics"
        timeout: 1800  # 30 minutes
        expected_exit_code: 0
        retry:
          max_attempts: 2
          delay: 60
          on_failure: "build_recovery"
        condition: "platform.other"
      # MacBook 构建所有 semantics (Apple Silicon)
      - command: "APPLE_SILICON=true uv --project kevm-pyk run -- kdist --verbose build -j6"
        cwd: "repositories/evm-semantics"
        timeout: 3600  # 1 hour
        expected_exit_code: 0
        retry:
          max_attempts: 2
          delay: 120
          on_failure: "build_recovery"
        environment:
          CC: "/opt/homebrew/opt/llvm@14/bin/clang"
          CXX: "/opt/homebrew/opt/llvm@14/bin/clang++"
        condition: "platform.macbook"
      # 通用平台构建所有 semantics
      - command: "uv --project kevm-pyk run -- kdist --verbose build -j6"
        cwd: "repositories/evm-semantics"
        timeout: 3600  # 1 hour
        expected_exit_code: 0
        retry:
          max_attempts: 2
          delay: 120
          on_failure: "build_recovery"
        condition: "platform.other"
    dependencies:
      - path: "repositories/evm-semantics/kevm-pyk/src/kevm_pyk/kproj/evm-semantics"
        type: "directory"

  # 步骤 2.5: 构建失败恢复
  - name: "build_recovery"
    description: "构建失败后的恢复处理"
    enabled: true
    depends_on: ["build_kevm"]
    condition: "on_failure"
    commands:
      # 删除失败的构建目录
      - command: "rm -rf repositories/evm-semantics"
        cwd: "."
        timeout: 30
        expected_exit_code: 0
      # 重新执行环境准备
      - command: "uv run perfx run -c eval-evm-summary/evm_summarization.yaml -s setup_environment"
        cwd: "."
        timeout: 1800  # 30 minutes
        expected_exit_code: 0
      # 重新执行构建
      - command: "uv run perfx run -c eval-evm-summary/evm_summarization.yaml -s build_kevm"
        cwd: "."
        timeout: 7200  # 2 hours
        expected_exit_code: 0

  # 步骤 3: 摘要化评估
  - name: "summarize_evaluation"
    description: "EVM opcode 摘要化评估"
    enabled: true
    depends_on: ["build_kevm"]
    commands:
      # 执行完整的摘要化有效性评估
      - command: "uv run python ../../../eval-evm-summary/summarize_evaluator.py --verbose --timeout 1800 --workers 4 --output ../../../results/data/summarize_evaluation_results.json"
        cwd: "repositories/evm-semantics/kevm-pyk"
        timeout: 1800  # 30 minutes
        expected_exit_code: 0

  # 步骤 4: 证明摘要化语义正确性
  - name: "prove_summaries"
    description: "摘要化语义正确性验证"
    enabled: true
    depends_on: ["build_kevm"]
    commands:
      - command: "uv run -- pytest src/tests/integration/test_prove.py::test_prove_summaries --verbose --durations=0 --dist=worksteal --numprocesses=8"
        cwd: "repositories/evm-semantics/kevm-pyk"
        timeout: 7200
        expected_exit_code: 0
        outputs:
          - input: stdout
            output: "results/data/prove_summaries_results.txt"
          - input: stdout
            parser: pytest
            output: "results/data/prove_summaries_results.json"
          - input: stderr
            output: "results/data/prove_summaries_errors.txt"
  
  # 步骤 5: Pure Concrete Execution 性能测试
  - name: "pure_concrete_performance"
    description: "Pure Concrete Execution 性能测试"
    enabled: true
    depends_on: ["build_kevm"]
    commands:
      # 修改为纯语义模式 (llvm-pure)
      - command: "sed -i.bak \"s/kdist.get('evm-semantics.llvm')/kdist.get('evm-semantics.llvm-pure')/g\" repositories/evm-semantics/kevm-pyk/src/kevm_pyk/interpreter.py"
        cwd: "."
        timeout: 30
        expected_exit_code: 0
      # 运行 pure concrete execution 性能测试
      - command: "uv run -- pytest src/tests/integration/test_conformance.py --durations=0 --verbose"
        cwd: "repositories/evm-semantics/kevm-pyk"
        timeout: 7200
        expected_exit_code: 0
        continue_on_failure: true
        outputs:
          - input: stdout
            output: "results/data/pure_concrete_performance.txt"
          - input: stdout
            parser: pytest
            output: "results/data/pure_concrete_performance.json"
          - input: stderr
            output: "results/data/pure_concrete_performance_errors.txt"
      # 清理：恢复到原始状态
      - command: "mv repositories/evm-semantics/kevm-pyk/src/kevm_pyk/interpreter.py.bak repositories/evm-semantics/kevm-pyk/src/kevm_pyk/interpreter.py"
        cwd: "."
        timeout: 30
        expected_exit_code: 0
        cleanup: true

  # 步骤 6: Summary Concrete Execution 性能测试
  - name: "summary_concrete_performance"
    description: "Summary Concrete Execution 性能测试"
    enabled: true
    depends_on: ["build_kevm"]
    commands:
      # 修改为摘要化语义模式 (llvm-summary)
      - command: "sed -i.bak \"s/kdist.get('evm-semantics.llvm')/kdist.get('evm-semantics.llvm-summary')/g\" repositories/evm-semantics/kevm-pyk/src/kevm_pyk/interpreter.py"
        cwd: "."
        timeout: 30
        expected_exit_code: 0
      # 运行 summary concrete execution 性能测试
      - command: "uv run -- pytest src/tests/integration/test_conformance.py --durations=0 --verbose"
        cwd: "repositories/evm-semantics/kevm-pyk"
        timeout: 7200
        expected_exit_code: 0
        continue_on_failure: true
        outputs:
          - input: stdout
            output: "results/data/summary_concrete_performance.txt"
          - input: stdout
            parser: pytest
            output: "results/data/summary_concrete_performance.json"
          - input: stderr
            output: "results/data/summary_concrete_performance_errors.txt"
      # 清理：恢复到原始状态
      - command: "mv repositories/evm-semantics/kevm-pyk/src/kevm_pyk/interpreter.py.bak repositories/evm-semantics/kevm-pyk/src/kevm_pyk/interpreter.py"
        cwd: "."
        timeout: 30
        expected_exit_code: 0
        cleanup: true

  # 步骤 7: Pure Symbolic Execution 性能测试
  - name: "pure_symbolic_performance"
    description: "Pure Symbolic Execution 性能测试"
    enabled: true
    depends_on: ["build_kevm"]
    commands:
      # 清理：恢复原始文件并删除备份文件
      - command: "git checkout -- tests/specs && git clean -f -d tests/specs/"
        cwd: "repositories/evm-semantics"
        timeout: 30
        expected_exit_code: 0
      # 替换 EDSL 为 EDSL-PURE
      - command: "find repositories/evm-semantics/tests/specs -type f -exec sed -i.bak 's/EDSL/EDSL-PURE/g' {} \\;"
        cwd: "."
        timeout: 30
        expected_exit_code: 0
      # 运行 test-prove-rules (booster 模式)
      - command: "uv run -- pytest src/tests/integration --verbose --durations=0 --dist=worksteal --maxfail=10 --numprocesses=4 -k test_prove_rules --tb=short --timeout=7200"
        cwd: "repositories/evm-semantics/kevm-pyk"
        timeout: 18000
        expected_exit_code: [0, 1, 2]
        continue_on_failure: true
        outputs:
          - input: stdout
            output: "results/data/pure_symbolic_prove_rules_booster.txt"
          - input: stdout
            parser: pytest
            output: "results/data/pure_symbolic_prove_rules_booster.json"
          - input: stderr
            output: "results/data/pure_symbolic_prove_rules_booster_errors.txt"
      # 运行 test-prove-rules (booster-dev 模式)
      - command: "uv run -- pytest src/tests/integration --verbose --durations=0 --dist=worksteal --maxfail=10 --numprocesses=4 -k test_prove_rules --tb=short --use-booster-dev --timeout=7200"
        cwd: "repositories/evm-semantics/kevm-pyk"
        timeout: 18000
        expected_exit_code: [0, 1, 2]
        continue_on_failure: true
        outputs:
          - input: stdout
            output: "results/data/pure_symbolic_prove_rules_booster_dev.txt"
          - input: stdout
            parser: pytest
            output: "results/data/pure_symbolic_prove_rules_booster_dev.json"
          - input: stderr
            output: "results/data/pure_symbolic_prove_rules_booster_dev_errors.txt"
      # 运行 test-prove-summaries
      - command: "uv run -- pytest src/tests/integration --verbose --durations=0 --dist=worksteal --maxfail=10 --numprocesses=4 -k test_prove_summaries --tb=short --timeout=7200"
        cwd: "repositories/evm-semantics/kevm-pyk"
        timeout: 18000
        expected_exit_code: [0, 1, 2]
        continue_on_failure: true
        outputs:
          - input: stdout
            output: "results/data/pure_symbolic_prove_summaries.txt"
          - input: stdout
            parser: pytest
            output: "results/data/pure_symbolic_prove_summaries.json"
          - input: stderr
            output: "results/data/pure_symbolic_prove_summaries_errors.txt"
      # 运行 test-prove-dss
      - command: "uv run -- pytest src/tests/integration --verbose --durations=0 --dist=worksteal --maxfail=10 --numprocesses=4 -k test_prove_dss --tb=short --timeout=7200"
        cwd: "repositories/evm-semantics/kevm-pyk"
        timeout: 18000
        expected_exit_code: [0, 1, 2]
        continue_on_failure: true
        outputs:
          - input: stdout
            output: "results/data/pure_symbolic_prove_dss.txt"
          - input: stdout
            parser: pytest
            output: "results/data/pure_symbolic_prove_dss.json"
          - input: stderr
            output: "results/data/pure_symbolic_prove_dss_errors.txt"


  # 步骤 8: Summary Symbolic Execution 性能测试
  - name: "summary_symbolic_performance"
    description: "Summary Symbolic Execution 性能测试"
    enabled: true
    depends_on: ["build_kevm"]
    commands:
      # 清理：恢复原始文件并删除备份文件
      - command: "git checkout -- tests/specs && git clean -f -d tests/specs/"
        cwd: "repositories/evm-semantics"
        timeout: 30
        expected_exit_code: 0
      # 替换 EDSL 为 EDSL-SUMMARY
      - command: "find repositories/evm-semantics/tests/specs -type f -exec sed -i.bak 's/EDSL/EDSL-SUMMARY/g' {} \\;"
        cwd: "."
        timeout: 30
        expected_exit_code: 0
      # 运行 test-prove-rules (booster 模式)
      - command: "uv run -- pytest src/tests/integration --verbose --durations=0 --dist=worksteal --maxfail=10 --numprocesses=4 -k test_prove_rules --tb=short --timeout=7200"
        cwd: "repositories/evm-semantics/kevm-pyk"
        timeout: 18000
        expected_exit_code: [0, 1, 2]
        continue_on_failure: true
        outputs:
          - input: stdout
            output: "results/data/summary_symbolic_prove_rules_booster.txt"
          - input: stdout
            parser: pytest
            output: "results/data/summary_symbolic_prove_rules_booster.json"
          - input: stderr
            output: "results/data/summary_symbolic_prove_rules_booster_errors.txt"
      # 运行 test-prove-rules (booster-dev 模式)
      - command: "uv run -- pytest src/tests/integration --verbose --durations=0 --dist=worksteal --maxfail=10 --numprocesses=4 -k test_prove_rules --tb=short --use-booster-dev --timeout=7200"
        cwd: "repositories/evm-semantics/kevm-pyk"
        timeout: 18000
        expected_exit_code: [0, 1, 2]
        continue_on_failure: true
        outputs:
          - input: stdout
            output: "results/data/summary_symbolic_prove_rules_booster_dev.txt"
          - input: stdout
            parser: pytest
            output: "results/data/summary_symbolic_prove_rules_booster_dev.json"
          - input: stderr
            output: "results/data/summary_symbolic_prove_rules_booster_dev_errors.txt"
      # 运行 test-prove-summaries
      - command: "uv run -- pytest src/tests/integration --verbose --durations=0 --dist=worksteal --maxfail=10 --numprocesses=4 -k test_prove_summaries --tb=short --timeout=7200"
        cwd: "repositories/evm-semantics/kevm-pyk"
        timeout: 18000
        expected_exit_code: [0, 1, 2]
        continue_on_failure: true
        outputs:
          - input: stdout
            output: "results/data/summary_symbolic_prove_summaries.txt"
          - input: stdout
            parser: pytest
            output: "results/data/summary_symbolic_prove_summaries.json"
          - input: stderr
            output: "results/data/summary_symbolic_prove_summaries_errors.txt"
      # 运行 test-prove-dss
      - command: "uv run -- pytest src/tests/integration --verbose --durations=0 --dist=worksteal --maxfail=10 --numprocesses=4 -k test_prove_dss --tb=short --timeout=7200"
        cwd: "repositories/evm-semantics/kevm-pyk"
        timeout: 18000
        expected_exit_code: [0, 1, 2]
        continue_on_failure: true
        outputs:
          - input: stdout
            output: "results/data/summary_symbolic_prove_dss.txt"
          - input: stdout
            parser: pytest
            output: "results/data/summary_symbolic_prove_dss.json"
          - input: stderr
            output: "results/data/summary_symbolic_prove_dss_errors.txt"
 